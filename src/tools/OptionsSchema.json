{
  "_comment": "See README.md for information about this file",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "VS Code launch/attach options",
  "description": "A json schema for the .NET VS Code Extension for Attach/Launch options and csharp.debug settings",
  "type": "object",
  "definitions": {
    "PipeConfigurations": {
      "type": "object",
      "description": "Platform-specific pipe launch configuration options",
      "default": {
        "pipeCwd": "${workspaceFolder}",
        "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
        "pipeArgs": []
      },
      "properties": {
        "pipeCwd": {
          "type": "string",
          "description": "The fully qualified path to the working directory for the pipe program.",
          "default": "${workspaceFolder}"
        },
        "pipeProgram": {
          "type": "string",
          "description": "The fully qualified pipe command to execute.",
          "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
        },
        "pipeArgs": {
          "anyOf": [
            {
              "type": "array",
              "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            {
              "type": "string",
              "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
              "default": ""
            }
          ]
        },
        "quoteArgs": {
          "type": "boolean",
          "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
          "default": true
        },
        "pipeEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables passed to the pipe program.",
          "default": {}
        }
      }
    },
    "PipeTransport": {
      "type": "object",
      "required": [ "debuggerPath" ],
      "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
      "default": {
        "pipeCwd": "${workspaceFolder}",
        "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
        "pipeArgs": [],
        "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
      },
      "properties": {
        "pipeCwd": {
          "type": "string",
          "description": "The fully qualified path to the working directory for the pipe program.",
          "default": "${workspaceFolder}"
        },
        "pipeProgram": {
          "type": "string",
          "description": "The fully qualified pipe command to execute.",
          "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
        },
        "pipeArgs": {
          "anyOf": [
            {
              "type": "array",
              "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            {
              "type": "string",
              "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn't used in any argument, the full debugger command will be instead be added to the end of the argument list.",
              "default": ""
            }
          ]
        },
        "debuggerPath": {
          "type": "string",
          "description": "The full path to the debugger on the target machine.",
          "default": "~/vsdbg/vsdbg"
        },
        "pipeEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables passed to the pipe program.",
          "default": {}
        },
        "quoteArgs": {
          "type": "boolean",
          "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
          "default": true
        },
        "windows": {
          "$ref": "#/definitions/PipeConfigurations",
          "description": "Windows-specific pipe launch configuration options",
          "default": {
            "pipeCwd": "${workspaceFolder}",
            "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
            "pipeArgs": []
          }
        },
        "osx": {
          "$ref": "#/definitions/PipeConfigurations",
          "description": "OSX-specific pipe launch configuration options",
          "default": {
            "pipeCwd": "${workspaceFolder}",
            "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
            "pipeArgs": []
          }
        },
        "linux": {
          "$ref": "#/definitions/PipeConfigurations",
          "description": "Linux-specific pipe launch configuration options",
          "default": {
            "pipeCwd": "${workspaceFolder}",
            "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
            "pipeArgs": []
          }
        }
      }
    },
    "DiagnosticsLog": {
      "type": "object",
      "required": [],
      "default": {},
      "description": "Settings to control which messages are printed to the output window from the debugger's diagnostics log. This log is meant to help troubleshoot problems with the debugger.",
      "properties": {
        "protocolMessages": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether DAP protocol messages exchanged between the C# debugger and the UI should be logged to the output window. This option defaults to `false`.",
          "default": false
        },
        "dispatcherMessages": {
          "type": "string",
          "enum": [ "none", "error", "important", "normal" ],
          "enumDescriptions": [
            "Do not print additional diagnostic messages.",
            "Print error-level diagnostic messages.",
            "Print important diagnostic messages.",
            "Print all non-verbose diagnostic messages."
          ],
          "markdownDescription": "Controls which messages are printed to the output window from the debugger's dispatcher. If not specified, this will default to `none` unless one of the verbose log settings are enabled (`debugEngineAPITracing`, `debugRuntimeEventTracing`, `expressionEvaluationTracing` or `startDebuggingTracing`), in which case the default changes to `normal`.",
          "default": "none"
        },
        "debugEngineAPITracing": {
          "type": "string",
          "enum": [ "none", "error", "all" ],
          "enumDescriptions": [
            "Disable tracing API calls",
            "Print failures from debugger API calls.",
            "Print all debugger API calls. This is very verbose."
          ],
          "markdownDescription": "Controls if API calls to Microsoft.VisualStudio.Debugger.Engine/vsdebugeng.h should be printed to the output window. This option defaults to `none`.",
          "default": "none"
        },
        "debugRuntimeEventTracing": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether verbose tracing for events raised by the underlying runtime should be enabled. This option defaults to `false`.",
          "default": false
        },
        "expressionEvaluationTracing": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether verbose tracing for expression evaluation should be enabled. This option defaults to `false`.",
          "default": false
        },
        "startDebuggingTracing": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether verbose tracing for start debugging should be enabled. This option defaults to `false`.",
          "default": false
        }
      }
    },
    "Logging": {
      "type": "object",
      "required": [],
      "default": {},
      "description": "Flags to determine what types of messages should be logged to the output window.",
      "properties": {
        "exceptions": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether exception messages should be logged to the output window. This option defaults to `true`.",
          "default": true
        },
        "moduleLoad": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether module load events should be logged to the output window. This option defaults to `true`.",
          "default": true
        },
        "programOutput": {
          "type": "boolean",
          "markdownDescription": "Flag to determine whether program output should be logged to the output window when not using an external console. This option defaults to `true`.",
          "default": true
        },
        "browserStdOut": {
          "type": "boolean",
          "markdownDescription": "Flag to determine if stdout text from the launching the web browser should be logged to the output window. This option defaults to `true`.",
          "default": true
        },
        "elapsedTiming": {
          "type": "boolean",
          "markdownDescription": "If true, protocol message logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took. This option defaults to `false`.",
          "default": false
        },
        "threadExit": {
          "type": "boolean",
          "markdownDescription": "Controls if a message is logged when a thread in the target process exits. This option defaults to `false`.",
          "default": false
        },
        "processExit": {
          "type": "boolean",
          "markdownDescription": "Controls if a message is logged when the target process exits, or debugging is stopped. This option defaults to `true`.",
          "default": true
        },
        "engineLogging": {
          "type": "boolean",
          "deprecationMessage": "The setting 'logging.engineLogging' has been deprecated in favor of 'logging.diagnosticsLog.protocolMessages'.",
          "default": false
        },
        "diagnosticsLog": {
          "$ref": "#/definitions/DiagnosticsLog",
          "description": "Settings to control which messages are printed to the output window from the debugger's diagnostics log. This log is meant to help troubleshoot problems with the debugger."
        },
        "consoleUsageMessage": {
          "type": "boolean",
          "description": "Controls if a message is logged when the target process calls a 'Console.Read*' API and stdin is redirected to the console.",
          "default": true
        }
      }
    },
    "LaunchBrowserPlatformOptions": {
      "type": "object",
      "required": [ "command" ],
      "properties": {
        "command": {
          "type": "string",
          "description": "The executable which will start the web browser.",
          "default": "open"
        },
        "args": {
          "type": "string",
          "description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to.",
          "default": "${auto-detect-url}"
        }
      }
    },
    "LaunchBrowser": {
      "type": "object",
      "required": [ "enabled" ],
      "description": "Configures starting a web browser as part of the launch -- should a web browser be started, and if so, what command should be run to start it. This option can be modified to launch a specific browser.",
      "default": {
        "enabled": true
      },
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether web browser launch is enabled. This option defaults to `true`.",
          "default": true
        },
        "args": {
          "type": "string",
          "description": "The arguments to pass to the command to open the browser. This is used only if the platform-specific element (`osx`, `linux` or `windows`) doesn't specify a value for `args`. Use ${auto-detect-url} to automatically use the address the server is listening to.",
          "default": "${auto-detect-url}"
        },
        "osx": {
          "$ref": "#/definitions/LaunchBrowserPlatformOptions",
          "description": "OSX-specific web launch configuration options. By default, this will start the browser using `open`.",
          "default": {
            "command": "open",
            "args": "${auto-detect-url}"
          }
        },
        "linux": {
          "$ref": "#/definitions/LaunchBrowserPlatformOptions",
          "description": "Linux-specific web launch configuration options. By default, this will start the browser using `xdg-open`.",
          "default": {
            "command": "xdg-open",
            "args": "${auto-detect-url}"
          }
        },
        "windows": {
          "$ref": "#/definitions/LaunchBrowserPlatformOptions",
          "description": "Windows-specific web launch configuration options. By default, this will start the browser using `cmd /c start`.",
          "default": {
            "command": "cmd.exe",
            "args": "/C start ${auto-detect-url}"
          }
        }
      }
    },
    "LaunchOptions": {
      "type": "object",
      "required": [
        "program"
      ],
      "properties": {
        "program": {
          "type": "string",
          "markdownDescription": "Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: `${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)`\n\nExample: `${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll`\n\nWhere:\n`(target-framework)` is the framework that the debugged project is being built for. This is normally found in the project file as the `TargetFramework` property.\n\n`(project-name.dll)` is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.",
          "default": "${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"
        },
        "cwd": {
          "type": "string",
          "description": "Path to the working directory of the program being debugged. Default is the current workspace.",
          "default": "${workspaceFolder}"
        },
        "args": {
          "anyOf": [
            {
              "type": "array",
              "description": "Command line arguments passed to the program.",
              "items": {
                "type": "string"
              },
              "default": []
            },
            {
              "type": "string",
              "description": "Stringified version of command line arguments passed to the program.",
              "default": ""
            }
          ]
        },
        "stopAtEntry": {
          "type": "boolean",
          "markdownDescription": "If true, the debugger should stop at the entry point of the target. This option defaults to `false`.",
          "default": false
        },
        "launchBrowser": {
          "$ref": "#/definitions/LaunchBrowser",
          "description": "Describes options to launch a web browser as part of launch",
          "default": {
            "enabled": true
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables passed to the program.",
          "default": {}
        },
        "envFile": {
          "type": "string",
          "markdownDescription": "Environment variables passed to the program by a file. E.g. `${workspaceFolder}/.env`",
          "default": "${workspaceFolder}/.env"
        },
        "console": {
          "type": "string",
          "enum": [ "internalConsole", "integratedTerminal", "externalTerminal" ],
          "enumDescriptions": [
            "The target process's console input (stdin) and output (stdout/stderr) are routed through the VS Code Debug Console.",
            "The target process will run inside VS Code's integrated terminal.",
            "The target process will run inside its own external terminal. When using this mode, you will need to switch focus between Visual Studio Code and the external terminal window."
          ],
          "markdownDescription": "Indicates which console the target program should be launched into. See https://aka.ms/VSCode-CS-LaunchJson-Console for more information.",
          "settingsDescription": "**Note:** _This option is only used for console projects launched with the `dotnet` debug configuration type_.\n\nIndicates which console the target program should be launched into. See https://aka.ms/VSCode-CS-LaunchJson-Console for more information.",
          "default": "internalConsole"
        },
        "externalConsole": {
          "type": "boolean",
          "markdownDescription": "Attribute `externalConsole` is deprecated, use `console` instead. This option defaults to `false`.",
          "default": false
        },
        "launchSettingsFilePath": {
          "type": "string",
          "markdownDescription": "The path to a launchSettings.json file. If this isn't set, the debugger will search in `{cwd}/Properties/launchSettings.json`.",
          "default": "${workspaceFolder}/Properties/launchSettings.json"
        },
        "launchSettingsProfile": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "If specified, indicates the name of the profile in launchSettings.json to use. This is ignored if launchSettings.json is not found. launchSettings.json will be read from the path specified should be the 'launchSettingsFilePath' property, or {cwd}/Properties/launchSettings.json if that isn't set. If this is set to null or an empty string then launchSettings.json is ignored. If this value is not specified the first 'Project' profile will be used.",
          "default": "<insert-profile-name>"
        },
        "sourceFileMap": {
          "type": "object",
          "markdownDescription": "Maps build-time paths to local source locations. All instances of build-time path will be replaced with the local source path.\n\nExample:\n\n`{\"<build-path>\":\"<local-source-path>\"}`",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        },
        "justMyCode": {
          "type": "boolean",
          "markdownDescription": "When enabled (the default), the debugger only displays and steps into user code (\"My Code\"), ignoring system code and other code that is optimized or that does not have debugging symbols. [More information](https://aka.ms/VSCode-CS-LaunchJson-JustMyCode)",
          "default": true
        },
        "requireExactSource": {
          "type": "boolean",
          "markdownDescription": "Flag to require current source code to match the pdb. This option defaults to `true`.",
          "default": true
        },
        "enableStepFiltering": {
          "type": "boolean",
          "markdownDescription": "Flag to enable stepping over Properties and Operators. This option defaults to `true`.",
          "default": true
        },
        "logging": {
          "$ref": "#/definitions/Logging",
          "description": "Flags to determine what types of messages should be logged to the output window."
        },
        "pipeTransport": {
          "$ref": "#/definitions/PipeTransport",
          "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg)."
        },
        "suppressJITOptimizations": {
          "type": "boolean",
          "markdownDescription": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. [More information](https://aka.ms/VSCode-CS-LaunchJson-SuppressJITOptimizations)",
          "default": false
        },
        "symbolOptions": {
          "$ref": "#/definitions/VSSymbolOptions",
          "description": "Options to control how symbols (.pdb files) are found and loaded.",
          "default": {
            "searchPaths": [],
            "searchMicrosoftSymbolServer": false,
            "searchNuGetOrgSymbolServer": false
          }
        },
        "sourceLinkOptions": {
          "$ref": "#/definitions/SourceLinkOptions",
          "markdownDescription": "Options to control how Source Link connects to web servers. [More information](https://aka.ms/VSCode-DotNet-SourceLink)",
          "default": {
            "*": { "enabled": true }
          }
        },
        "expressionEvaluationOptions": {
          "$ref": "#/definitions/ExpressionEvaluationOptions",
          "description": "Options to control how the debugger evaluates expressions in data tips, the debug view's 'Watch' and 'Variables' sections, or in the Debug Console.",
          "default": {}
        },
        "targetOutputLogPath": {
          "type": "string",
          "description": "When set, text that the target application writes to stdout and stderr (ex: Console.WriteLine) will be saved to the specified file. This option is ignored if console is set to something other than internalConsole. E.g. '${workspaceFolder}/out.txt'",
          "default": ""
        },
        "targetArchitecture": {
          "type": "string",
          "markdownDescription": "[Only supported in local macOS debugging]\n\nThe architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are `x86_64` or `arm64`.",
          "enum": [ "x86_64", "arm64" ]
        },
        "checkForDevCert": {
          "type": "boolean",
          "description": "If you are launching a web project on Windows or macOS and this is enabled, the debugger will check if the computer has a self-signed HTTPS certificate used to develop web servers running on https endpoints. If unspecified, defaults to true when `serverReadyAction` is set. This option does nothing on Linux, VS Code remote, and VS Code Web UI scenarios. If the HTTPS certificate is not found or isn't trusted, the user will be prompted to install/trust it.",
          "default": true
        }
      }
    },
    "AttachOptions": {
      "type": "object",
      "required": [],
      "properties": {
        "processName": {
          "type": "string",
          "default": "",
          "markdownDescription": "The process name to attach to. If this is used, `processId` should not be used."
        },
        "processId": {
          "anyOf": [
            {
              "type": "string",
              "markdownDescription": "The process id to attach to. Use \"\" to get a list of running processes to attach to. If `processId` used, `processName` should not be used.",
              "default": ""
            },
            {
              "type": "integer",
              "markdownDescription": "The process id to attach to. Use \"\" to get a list of running processes to attach to. If `processId` used, `processName` should not be used.",
              "default": 0
            }
          ]
        },
        "sourceFileMap": {
          "type": "object",
          "markdownDescription": "Maps build-time paths to local source locations. All instances of build-time path will be replaced with the local source path.\n\nExample:\n\n`{\"<build-path>\":\"<local-source-path>\"}`",
          "additionalProperties": {
            "type": "string"
          }
        },
        "justMyCode": {
          "type": "boolean",
          "markdownDescription": "Flag to only show user code. This option defaults to `true`.",
          "default": true
        },
        "requireExactSource": {
          "type": "boolean",
          "markdownDescription": "Flag to require current source code to match the pdb. This option defaults to `true`.",
          "default": true
        },
        "enableStepFiltering": {
          "type": "boolean",
          "markdownDescription": "Flag to enable stepping over Properties and Operators. This option defaults to `true`.",
          "default": true
        },
        "logging": {
          "$ref": "#/definitions/Logging",
          "description": "Flags to determine what types of messages should be logged to the output window."
        },
        "pipeTransport": {
          "$ref": "#/definitions/PipeTransport",
          "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg)."
        },
        "suppressJITOptimizations": {
          "type": "boolean",
          "markdownDescription": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. [More information](https://aka.ms/VSCode-CS-LaunchJson-SuppressJITOptimizations)",
          "default": false
        },
        "symbolOptions": {
          "$ref": "#/definitions/VSSymbolOptions",
          "description": "Options to control how symbols (.pdb files) are found and loaded.",
          "default": {
            "searchPaths": [],
            "searchMicrosoftSymbolServer": false,
            "searchNuGetOrgSymbolServer": false
          }
        },
        "sourceLinkOptions": {
          "$ref": "#/definitions/SourceLinkOptions",
          "markdownDescription": "Options to control how Source Link connects to web servers. [More information](https://aka.ms/VSCode-DotNet-SourceLink)",
          "default": {
            "*": { "enabled": true }
          }
        },
        "expressionEvaluationOptions": {
          "$ref": "#/definitions/ExpressionEvaluationOptions",
          "description": "Options to control how the debugger evaluates expressions in data tips, the debug view's 'Watch' and 'Variables' sections, or in the Debug Console.",
          "default": {}
        },
        "targetArchitecture": {
          "type": "string",
          "markdownDescription": "[Only supported in local macOS debugging]\n\nThe architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are `x86_64` or `arm64`.",
          "enum": [ "x86_64", "arm64" ]
        }
      }
    },
    "SourceLinkOptions": {
      "type": "object",
      "markdownDescription": "Options to control how Source Link connects to web servers. [More information](https://aka.ms/VSCode-DotNet-SourceLink)",
      "additionalItems": {
        "type": "object",
        "properties": {
          "enabled": {
            "title": "boolean",
            "markdownDescription": "Is Source Link enabled for this URL? If unspecified, this option defaults to `true`.",
            "default": true
          }
        }
      }
    },
    "ExpressionEvaluationOptions": {
      "type": "object",
      "description": "Options to control how the debugger evaluates expressions in data tips, the debug view's 'Watch' and 'Variables' sections, or in the Debug Console.",
      "default": {},
      "properties": {
        "allowImplicitFuncEval": {
          "type": "boolean",
          "description": "When true (the default state), the debugger will automatically call property `get` methods and other implicit function calls.",
          "default": true
        },
        "allowToString": {
          "type": "boolean",
          "markdownDescription": "When true (the default state), the debugger will automatically call `ToString` to format objects. This option has no effect if `allowImplicitFuncEval` is `false`.",
          "default": true
        },
        "allowFastEvaluate": {
          "type": "boolean",
          "description": "When true (the default state), the debugger will attempt faster evaluation by simulating execution of simple properties and methods.",
          "default": true
        },
        "showRawValues": {
          "type": "boolean",
          "description": "When true, the debugger will show raw structure of objects in variables windows.",
          "default": false
        }
      }
    }
  }
}
